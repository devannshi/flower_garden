# Beam Search Planting Algorithm with Diversity Bonus

## Core Idea

Instead of greedily selecting the single best plant placement at each step, beam search maintains k candidate solutions (the "beam") and explores multiple promising paths in parallel. A diversity bonus encourages the beam to explore different regions of the solution space, preventing premature convergence to suboptimal layouts.

## Algorithm Overview

### 1. Initialization
- Start with k=5 empty garden states (beam width)

### 2. Iterative Expansion
For each iteration:
- **Expand**: For each beam state, try placing each remaining variety at each candidate position
- **Score**: Evaluate expansions using:
  - Base score: Simulation-based growth (50 turns)
  - Diversity bonus: Spatial + compositional differences from other beam states
- **Prune**: Remove states below threshold (best_score × 0.1)
- **Select**: Keep top k states

### 3. Termination
- Stop when all beam states are complete (no varieties left)
- Return the state with highest base score

## Diversity Bonus

Encourages exploration by rewarding states that differ from others in the beam:

**Spatial Diversity**: 
- Measures average minimum distance between plant positions
- Prevents all beams from converging to same layout

**Compositional Diversity**:
- Counts differences in variety placement order
- Encourages different species combinations

**Formula**:
```
diversity_bonus = diversity_weight × (spatial_div + 5 × compositional_div)
total_score = base_score + diversity_bonus
```

## Key Parameters

- **Beam Width (k=5)**: Number of candidate solutions maintained
- **Diversity Weight (0.3)**: Balance between quality and exploration
- **Pruning Threshold (0.1)**: Minimum relative score to keep in beam
- **T_placement (50)**: Simulation turns for scoring during placement

## Advantages Over Greedy

1. **Global Optimization**: Explores multiple paths, avoids local optima
2. **Diversity**: Less likely to miss good solutions due to early bad choices
3. **Robustness**: Better handles difficult variety combinations
4. **Flexibility**: Can tune exploration vs exploitation via diversity weight

## Example Beam Evolution

```
Iteration 1: Place first plant
  State 0: R at (0,0), score=7.5
  State 1: R at (0,0), score=7.5  (duplicate, but will diverge)
  State 2: R at (0,0), score=7.5
  State 3: R at (0,0), score=7.5
  State 4: R at (0,0), score=7.5

Iteration 2: Place second plant
  State 0: R,G at (0,0),(3.6,0), score=9.8, div=0.0
  State 1: R,G at (0,0),(0,3.6), score=9.7, div=3.6  → total=10.0
  State 2: R,G at (0,0),(2.5,2.5), score=9.6, div=4.2 → total=9.9
  State 3: R,B at (0,0),(3.6,0), score=8.1, div=5.0  → total=8.6
  State 4: R,G at (0,0),(4.5,0), score=8.5, div=2.1  → total=8.8

After diversity bonus, State 1 (vertical placement) ranks higher despite
lower base score, ensuring beam explores different geometries.

Iteration 3: Continue expanding...
  Beams diverge in variety orders and spatial arrangements
  Diversity bonus keeps solutions from collapsing to single strategy
```

## Comparison to Greedy

| Aspect | Greedy | Beam Search + Diversity |
|--------|--------|------------------------|
| Candidate solutions | 1 | k (e.g., 5) |
| Exploration | None (committed) | Parallel paths |
| Diversity | Implicit | Explicit bonus |
| Computational cost | O(n) | O(k×n) |
| Solution quality | Local optimum | Near-global optimum |
| Memory usage | Single state | k states |

## When to Use

**Use Beam Search when:**
- Problem is complex (many varieties, tight constraints)
- Solution quality is critical
- Willing to accept k× slower runtime (k=3-5 usually)
- Want diverse solutions for ensemble methods

**Use Greedy when:**
- Problem is simple or has clear structure
- Speed is critical
- Varieties are well-balanced (less need for exploration)
- Single solution sufficient

## Expected Performance

On typical problems (6-12 plants):
- **5-15% better growth** than greedy
- **More balanced spatial layouts**
- **Better connectivity patterns**
- **2-5× slower** (acceptable for offline planning)

## Tuning Guidelines

### Beam Width
- k=1: Equivalent to greedy
- k=3-5: Good balance (recommended)
- k=10+: Diminishing returns, much slower

### Diversity Weight
- 0.0: Pure beam search (no diversity)
- 0.1-0.2: Subtle encouragement
- 0.3-0.5: Balanced (recommended)
- 0.6+: Exploration dominates, may sacrifice quality

### Pruning Threshold
- 0.0: Keep all expansions (very slow)
- 0.1: Moderate pruning (recommended)
- 0.5: Aggressive pruning (faster, less exploration)

